{
  "version": 3,
  "sources": ["../server/index.ts"],
  "sourcesContent": ["import crypto from \"crypto\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createRequestHandler } from \"@remix-run/express\";\nimport { broadcastDevReady, type ServerBuild } from \"@remix-run/node\";\nimport address from \"address\";\nimport chalk from \"chalk\";\nimport chokidar from \"chokidar\";\nimport closeWithGrace from \"close-with-grace\";\nimport compression from \"compression\";\nimport express from \"express\";\nimport getPort, { portNumbers } from \"get-port\";\n// import helmet from \"helmet\";\nimport morgan from \"morgan\";\n\n// @ts-ignore - this file may not exist if you haven't built yet, but it will\n// definitely exist by the time the dev or prod server actually runs.\nimport * as remixBuild from \"../build/index.js\";\n\nconst MODE = process.env.NODE_ENV;\n\nconst BUILD_PATH = \"../build/index.js\";\n\nconst build = remixBuild as unknown as ServerBuild;\nlet devBuild = build;\n\nconst app = express();\n\nconst getHost = (req: { get: (key: string) => string | undefined }) =>\n  req.get(\"X-Forwarded-Host\") ?? req.get(\"host\") ?? \"\";\n\n// ensure HTTPS only (X-Forwarded-Proto comes from Fly)\napp.use((req, res, next) => {\n  const proto = req.get(\"X-Forwarded-Proto\");\n  const host = getHost(req);\n  if (proto === \"http\") {\n    res.set(\"X-Forwarded-Proto\", \"https\");\n    res.redirect(`https://${host}${req.originalUrl}`);\n    return;\n  }\n  next();\n});\n\n// no ending slashes for SEO reasons\n// https://github.com/epicweb-dev/epic-stack/discussions/108\napp.use((req, res, next) => {\n  if (req.path.endsWith(\"/\") && req.path.length > 1) {\n    const query = req.url.slice(req.path.length);\n    const safepath = req.path.slice(0, -1).replace(/\\/+/g, \"/\");\n    res.redirect(301, safepath + query);\n  } else {\n    next();\n  }\n});\n\napp.use(compression());\n\n// http://expressjs.com/en/advanced/best-practice-security.html#at-a-minimum-disable-x-powered-by-header\napp.disable(\"x-powered-by\");\n\n// Remix fingerprints its assets so we can cache forever.\napp.use(\n  \"/build\",\n  express.static(\"public/build\", { immutable: true, maxAge: \"1y\" })\n);\n// Everything else (like favicon.ico) is cached for an hour. You may want to be\n// more aggressive with this caching.\napp.use(express.static(\"public\", { maxAge: \"1h\" }));\n\nmorgan.token(\"url\", (req, res) => decodeURIComponent(req.url ?? \"\"));\napp.use(morgan(\"tiny\"));\n\napp.use((_, res, next) => {\n  res.locals.cspNonce = crypto.randomBytes(16).toString(\"hex\");\n  next();\n});\n\n// app.use(\n//   helmet({\n//     crossOriginEmbedderPolicy: false,\n//     contentSecurityPolicy: {\n//       directives: {\n//         \"connect-src\": MODE === \"development\" ? [\"ws:\", \"'self'\"] : null,\n//         \"font-src\": [\"'self'\"],\n//         \"frame-src\": [\"'self'\"],\n//         \"img-src\": [\"'self'\"],\n//         \"script-src\": [\n//           \"'strict-dynamic'\",\n//           \"'self'\",\n//           // @ts-expect-error\n//           (_, res) => `'nonce-${res.locals.cspNonce}'`,\n//         ],\n//         \"script-src-attr\": [\n//           // @ts-expect-error\n//           (_, res) => `'nonce-${res.locals.cspNonce}'`,\n//         ],\n//         \"upgrade-insecure-requests\": null,\n//       },\n//     },\n//   })\n// );\n\nasync function getRequestHandlerOptions(\n  build: ServerBuild\n): Promise<Parameters<typeof createRequestHandler>[0]> {\n  function getLoadContext(_: any, res: any) {\n    return { cspNonce: res.locals.cspNonce };\n  }\n  return { build, mode: MODE, getLoadContext };\n}\n\napp.all(\n  \"*\",\n  process.env.NODE_ENV === \"development\"\n    ? async (req, res, next) => {\n        return createRequestHandler(await getRequestHandlerOptions(devBuild))(\n          req,\n          res,\n          next\n        );\n      }\n    : createRequestHandler(await getRequestHandlerOptions(build))\n);\n\nconst desiredPort = Number(process.env.PORT || 3000);\nconst portToUse = await getPort({\n  port: portNumbers(desiredPort, desiredPort + 100),\n});\n\nconst server = app.listen(portToUse, () => {\n  const addy = server.address();\n  const portUsed =\n    desiredPort === portToUse\n      ? desiredPort\n      : addy && typeof addy === \"object\"\n      ? addy.port\n      : 0;\n\n  if (portUsed !== desiredPort) {\n    console.warn(\n      chalk.yellow(\n        `\u26A0\uFE0F  Port ${desiredPort} is not available, using ${portUsed} instead.`\n      )\n    );\n  }\n  console.log(`\uD83E\uDDA4  Server ready!`);\n  const localUrl = `http://localhost:${portUsed}`;\n  let lanUrl: string | null = null;\n  const localIp = address.ip();\n  // Check if the address is a private ip\n  // https://en.wikipedia.org/wiki/Private_network#Private_IPv4_address_spaces\n  // https://github.com/facebook/create-react-app/blob/d960b9e38c062584ff6cfb1a70e1512509a966e7/packages/react-dev-utils/WebpackDevServerUtils.js#LL48C9-L54C10\n  if (/^10[.]|^172[.](1[6-9]|2[0-9]|3[0-1])[.]|^192[.]168[.]/.test(localIp)) {\n    lanUrl = `http://${localIp}:${portUsed}`;\n  }\n\n  console.log(\n    `\n${chalk.bold(\"Local:\")}            ${chalk.cyan(localUrl)}\n${lanUrl ? `${chalk.bold(\"On Your Network:\")}  ${chalk.cyan(lanUrl)}` : \"\"}\n${chalk.bold(\"Press Ctrl+C to stop\")}\n    `.trim()\n  );\n\n  if (process.env.NODE_ENV === \"development\") {\n    broadcastDevReady(build);\n  }\n});\n\ncloseWithGrace(async ({ err }) => {\n  // log the error early\n  if (err) {\n    console.error(chalk.red(err));\n    console.error(chalk.red(err.stack));\n  }\n\n  // close up things\n  await new Promise((resolve, reject) => {\n    server.close((e) => (e ? reject(e) : resolve(\"ok\")));\n  });\n\n  // if there was an error, then exit with a failure code\n  if (err) {\n    process.exit(1);\n  }\n});\n\n// during dev, we'll keep the build module up to date with the changes\nif (process.env.NODE_ENV === \"development\") {\n  async function reloadBuild() {\n    devBuild = await import(`${BUILD_PATH}?update=${Date.now()}`);\n    broadcastDevReady(devBuild);\n  }\n\n  const dirname = path.dirname(fileURLToPath(import.meta.url));\n  const watchPath = path.join(dirname, BUILD_PATH).replace(/\\\\/g, \"/\");\n  const watcher = chokidar.watch(watchPath, { ignoreInitial: true });\n  watcher.on(\"all\", reloadBuild);\n}\n"],
  "mappings": "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",
  "names": ["build"]
}
